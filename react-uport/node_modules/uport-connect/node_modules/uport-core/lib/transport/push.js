'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.send = undefined;

var _index = require('./../crypto/index.js');

var _nets = require('nets');

var _nets2 = _interopRequireDefault(_nets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PUTUTU_URL = 'https://api.uport.me/pututu/sns/';

// TODO still add redirect opt and type
/**
  *  Send a push notification to a user, consumes a token which allows you to send push notifications
  *  and a url/uri request you want to send to the user.
  *
  *  @param    {String}                  token              a push notification token (get a pn token by requesting push permissions in a request)
  *  @param    {Object}                  payload            push notification payload
  *  @param    {String}                  payload.url        a uport request url
  *  @param    {String}                  payload.message    a message to display to the user
  *  @param    {String}                  pubEncKey          the public encryption key of the receiver, encoded as a base64 string
  *  @return   {Promise<Object, Error>}              a promise which resolves with successful status or rejects with an error
  */
var send = function send(token, pubEncKey) {
  var pushServiceUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PUTUTU_URL;

  if (!token) throw new Error('Requires push notification token');
  if (!pubEncKey) throw new Error('Requires public encryption key of the receiver');

  return function (uri) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        message = _ref.message;

    return new Promise(function (resolve, reject) {
      if (!uri) return reject(new Error('Requires uri request for sending to users device'));
      var plaintext = padMessage(JSON.stringify({ uri: uri, message: message }));
      var enc = (0, _index.encryptMessage)(plaintext, pubEncKey);
      var payload = { message: JSON.stringify(enc) };
      (0, _nets2.default)({
        uri: pushServiceUrl,
        json: payload,
        method: 'POST',
        withCredentials: false,
        headers: {
          Authorization: 'Bearer ' + token
        }
      }, function (error, res, body) {
        if (error) return reject(error);
        if (res.statusCode === 200) return resolve(body);
        if (res.statusCode === 403) {
          return reject(new Error('Error sending push notification to user: Invalid Token'));
        }
        reject(new Error('Error sending push notification to user: ' + res.statusCode + ' ' + body.toString()));
      });
    });
  };
};

/**
 *  Adds padding to a string
 *
 *  @param      {String}        the message to be padded
 *  @return     {String}        the padded message
 *  @private
 */
var padMessage = function padMessage(message) {
  var INTERVAL_LENGTH = 50;
  var padLength = INTERVAL_LENGTH - message.length % INTERVAL_LENGTH;
  return message + ' '.repeat(padLength);
};

exports.send = send;